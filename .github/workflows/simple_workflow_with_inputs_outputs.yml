name: Simple workflow with inputs and outputs
on:
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:
    inputs:
      name:
        type: string
        default: 'BASIC_USER'
        required: false
      email:
        type: string
        default: 'basicuser@basic.com'
        required: false
env:
  greeting_string: 'Hello user ${{ inputs.name }}. This message is defined in an environment variable, with your username provided by input parameters.'
  files_string: 'These are your files'
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  first_parallel_job:
    name: First parallel job
    runs-on: windows-latest
    outputs:
      file-size: ${{ steps.calculate-file-size.outputs.file-size }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout the workflow-practice repository
      - name: Print a greeting created from the combination of input and environment variables
        run: |
          echo "${{ env.greeting_string }}"
        shell: powershell
      - name: Use outputs between steps (get filepath and use it in the next step)
        id: get-file
        run: |
          $file = Get-ChildItem -Path ${{ github.workspace }} -Filter Readme.md -Recurse | %{$_.FullName}
          echo "::set-output name=filename::$file"
        shell: powershell
      - name: Use outputs between jobs (calculate size of file and use it in the last job)
        id: calculate-file-size
        run: |
          Function Format-FileSize() {
          Param ([int]$size)
          If ($size -gt 1TB) {[string]::Format("{0:0.00} TB", $size / 1TB)}
          ElseIf ($size -gt 1GB) {[string]::Format("{0:0.00} GB", $size / 1GB)}
          ElseIf ($size -gt 1MB) {[string]::Format("{0:0.00} MB", $size / 1MB)}
          ElseIf ($size -gt 1KB) {[string]::Format("{0:0.00} kB", $size / 1KB)}
          ElseIf ($size -gt 0) {[string]::Format("{0:0.00} B", $size)}
          Else {""}
          }
          $file = "${{ steps.get-file.outputs.filename }}"
          $size=Format-FileSize((Get-Item $file).length)
          Write-Host($size)
          echo "::set-output name=file-size::$size"
        shell: powershell
  second_parallel_job:
    name: Second parallel job
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout the workflow-practice repository
      - name: Print a greeting created from the combination of input and environment variables
        run: |
          echo "${{ env.greeting_string }}"
        shell: powershell
  third_sequential_job:
   name: Third sequential job
   runs-on: windows-latest
   needs: [first_parallel_job,second_parallel_job]
   steps:
     - uses: actions/checkout@v3
       name: Checkout the workflow-practice repository
     - name: Print the calculated size from the first job
       run: |
         echo "Hello ${{ inputs.user }}. This is the file size calculated in the first job: ${{ needs.first_parallel_job.outputs.file-size }}"
       shell: powershell
